<div class="row">

<%= search_form_for @q do |f| %>
  <p class="lead">Narrow results:</p>

  <div class="form-group">
    <%= f.label :content_cont, "Title containing" %>
    <%= f.text_field :content_cont, :class => "form-control", :placeholder => "Enter a few characters" %>
  </div>

  <div class="col-md-9">
    <div class="panel panel-primary">
      <div class="panel-heading">
        <h2>
          Statuses
          <a href="/statuses/new" class="btn btn-sm btn-success">
            <i class="fa fa-plus"></i>
          </a>
        </h2>
      </div>
      <table class="table table-hover table-striped">
        <% @statuses.each do |status| %>
          <tr>
            <td><%= status.user.username %></td>
            <td><%= time_ago_in_words(status.created_at) %> ago</td>
            <td><%= status.content %></td>
          </tr>
        <% end %>
      </table>
    </div>
  </div>


</div>

<!-- You can ignore the following. It's a quick and dirty example of how to get a Pinterest-style layout with quick search. -->
<!-- JavaScript for Isotope layout and quicksearch -->
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery.imagesloaded/3.1.8/imagesloaded.pkgd.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery.isotope/2.0.0/isotope.pkgd.min.js"></script>
<script>
  $(function() {
    // quick search regex
    var qsRegex;

    // init Isotope
    var $container = $('.isotope-container');

    $container.imagesLoaded(function() {
      $container.isotope({
        itemSelector: '.isotope-item',
        layoutMode: 'masonry',
        filter: function() {
          return qsRegex ? $(this).text().match( qsRegex ) : true;
        }
      })
    });

    // use value of search field to filter
    var $quicksearch = $('#quicksearch').keyup( debounce( function() {
      qsRegex = new RegExp( $quicksearch.val(), 'gi' );
      $container.isotope();
    }, 200 ) );

  });

  // debounce so filtering doesn't happen every millisecond
  function debounce( fn, threshold ) {
    var timeout;
    return function debounced() {
      if ( timeout ) {
        clearTimeout( timeout );
      }
      function delayed() {
        fn();
        timeout = null;
      }
      timeout = setTimeout( delayed, threshold || 100 );
    }
  }
</script>

<!-- End responsive, Isotope-based layout example -->
